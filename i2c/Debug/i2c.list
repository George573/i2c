
i2c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bc4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dcc  08002dcc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dcc  08002dcc  00012dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002dd4  08002dd4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dd4  08002dd4  00012dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dd8  08002dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000002c  08002e08  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002e08  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005a  2**0
                  CONTENTS, READONLY
 13 .debug_info   000082f9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178c  00000000  00000000  00028396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000798  00000000  00000000  00029b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005b9  00000000  00000000  0002a2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b548  00000000  00000000  0002a879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d71  00000000  00000000  00055dc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105aa2  00000000  00000000  0005fb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001dec  00000000  00000000  001655d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001673c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000002c 	.word	0x2000002c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002da4 	.word	0x08002da4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000030 	.word	0x20000030
 8000234:	08002da4 	.word	0x08002da4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <Slave_i2c_Resieve_16>:
		HIGH_CONV_MASK
};
/*-------------------------------------*/

uint16_t Slave_i2c_Resieve_16(I2C_HandleTypeDef *hspi)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	uint16_t msg = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	81fb      	strh	r3, [r7, #14]

	// Read first byte (msg = (buff)000000)
	uint16_t buff;
	HAL_I2C_Slave_Receive(hspi, &buff, 1, 1000);
 8000540:	f107 010c 	add.w	r1, r7, #12
 8000544:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000548:	2201      	movs	r2, #1
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f000 ff93 	bl	8001476 <HAL_I2C_Slave_Receive>
	msg = buff << 8;
 8000550:	89bb      	ldrh	r3, [r7, #12]
 8000552:	021b      	lsls	r3, r3, #8
 8000554:	81fb      	strh	r3, [r7, #14]

	// Read second byte (msg = msg + buff)
	HAL_I2C_Slave_Receive(hspi, &buff, 1, 1000);
 8000556:	f107 010c 	add.w	r1, r7, #12
 800055a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055e:	2201      	movs	r2, #1
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 ff88 	bl	8001476 <HAL_I2C_Slave_Receive>
	msg |= buff;
 8000566:	89ba      	ldrh	r2, [r7, #12]
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	4313      	orrs	r3, r2
 800056c:	81fb      	strh	r3, [r7, #14]

	return msg;
 800056e:	89fb      	ldrh	r3, [r7, #14]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <Slave_i2c_Transmit_16>:

uint16_t Slave_i2c_Transmit_16(I2C_HandleTypeDef *hspi, uint16_t data)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	807b      	strh	r3, [r7, #2]
	// Write first buffer
	uint8_t buff = data >> 8;
 8000584:	887b      	ldrh	r3, [r7, #2]
 8000586:	0a1b      	lsrs	r3, r3, #8
 8000588:	b29b      	uxth	r3, r3
 800058a:	b2db      	uxtb	r3, r3
 800058c:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Slave_Transmit(hspi, &buff, 1, 1000);
 800058e:	f107 010f 	add.w	r1, r7, #15
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	2201      	movs	r2, #1
 8000598:	6878      	ldr	r0, [r7, #4]
 800059a:	f000 fe4f 	bl	800123c <HAL_I2C_Slave_Transmit>

	// Write second buffer
	buff = data;
 800059e:	887b      	ldrh	r3, [r7, #2]
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Slave_Transmit(hspi, &buff, 1, 1000);
 80005a4:	f107 010f 	add.w	r1, r7, #15
 80005a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ac:	2201      	movs	r2, #1
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 fe44 	bl	800123c <HAL_I2C_Slave_Transmit>
}
 80005b4:	bf00      	nop
 80005b6:	4618      	mov	r0, r3
 80005b8:	3710      	adds	r7, #16
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}

080005be <Slave_Listen4>:

uint16_t Slave_Listen4(I2C_HandleTypeDef *hspi)
{
 80005be:	b580      	push	{r7, lr}
 80005c0:	b084      	sub	sp, #16
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
	uint8_t address;
	HAL_I2C_Slave_Receive(hspi, &address, 1, HAL_MAX_DELAY);
 80005c6:	f107 010f 	add.w	r1, r7, #15
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005ce:	2201      	movs	r2, #1
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 ff50 	bl	8001476 <HAL_I2C_Slave_Receive>

	if (address & 1) {
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d007      	beq.n	80005f0 <Slave_Listen4+0x32>
		slave_set_reg_data(hspi, address >> 1);
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	085b      	lsrs	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	4619      	mov	r1, r3
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f80d 	bl	8000608 <slave_set_reg_data>
 80005ee:	e006      	b.n	80005fe <Slave_Listen4+0x40>
	} else {
		slave_send_reg_data(hspi, address >> 1);
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
 80005f2:	085b      	lsrs	r3, r3, #1
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	4619      	mov	r1, r3
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f000 f827 	bl	800064c <slave_send_reg_data>
	}
}
 80005fe:	bf00      	nop
 8000600:	4618      	mov	r0, r3
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <slave_set_reg_data>:

uint16_t slave_set_reg_data(I2C_HandleTypeDef *hspi, uint8_t address)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	uint16_t data = Slave_i2c_Resieve_16(hspi);
 8000614:	6878      	ldr	r0, [r7, #4]
 8000616:	f7ff ff8d 	bl	8000534 <Slave_i2c_Resieve_16>
 800061a:	4603      	mov	r3, r0
 800061c:	81fb      	strh	r3, [r7, #14]
	if (address >= 0 && address <= 7) {
 800061e:	78fb      	ldrb	r3, [r7, #3]
 8000620:	2b07      	cmp	r3, #7
 8000622:	d80a      	bhi.n	800063a <slave_set_reg_data+0x32>
		regs[address] = data & masks[address];
 8000624:	78fb      	ldrb	r3, [r7, #3]
 8000626:	4a07      	ldr	r2, [pc, #28]	; (8000644 <slave_set_reg_data+0x3c>)
 8000628:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800062c:	78fb      	ldrb	r3, [r7, #3]
 800062e:	89fa      	ldrh	r2, [r7, #14]
 8000630:	400a      	ands	r2, r1
 8000632:	b291      	uxth	r1, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <slave_set_reg_data+0x40>)
 8000636:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	}

}
 800063a:	bf00      	nop
 800063c:	4618      	mov	r0, r3
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000010 	.word	0x20000010
 8000648:	20000000 	.word	0x20000000

0800064c <slave_send_reg_data>:
uint16_t slave_send_reg_data(I2C_HandleTypeDef *hspi, uint8_t address)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	70fb      	strb	r3, [r7, #3]
	if (address >= 0 && address <= 7)
 8000658:	78fb      	ldrb	r3, [r7, #3]
 800065a:	2b07      	cmp	r3, #7
 800065c:	d808      	bhi.n	8000670 <slave_send_reg_data+0x24>
		Slave_i2c_Transmit_16(hspi, regs[address]);
 800065e:	78fb      	ldrb	r3, [r7, #3]
 8000660:	4a08      	ldr	r2, [pc, #32]	; (8000684 <slave_send_reg_data+0x38>)
 8000662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000666:	4619      	mov	r1, r3
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f7ff ff85 	bl	8000578 <Slave_i2c_Transmit_16>
 800066e:	e003      	b.n	8000678 <slave_send_reg_data+0x2c>
	else
		Slave_i2c_Transmit_16(hspi, 0);
 8000670:	2100      	movs	r1, #0
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff80 	bl	8000578 <Slave_i2c_Transmit_16>
}
 8000678:	bf00      	nop
 800067a:	4618      	mov	r0, r3
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800068c:	f000 f8c2 	bl	8000814 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 f9d9 	bl	8000a46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f80a 	bl	80006ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f8a4 	bl	80007e4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800069c:	f000 f862 	bl	8000764 <MX_I2C2_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Slave_Listen4(&hi2c2);
 80006a0:	4801      	ldr	r0, [pc, #4]	; (80006a8 <main+0x20>)
 80006a2:	f7ff ff8c 	bl	80005be <Slave_Listen4>
 80006a6:	e7fb      	b.n	80006a0 <main+0x18>
 80006a8:	20000048 	.word	0x20000048

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b094      	sub	sp, #80	; 0x50
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2234      	movs	r2, #52	; 0x34
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f002 fb46 	bl	8002d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xb0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xb0>)
 80006d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006da:	6413      	str	r3, [r2, #64]	; 0x40
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xb0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e8:	4b1d      	ldr	r3, [pc, #116]	; (8000760 <SystemClock_Config+0xb4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <SystemClock_Config+0xb4>)
 80006f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b19      	ldr	r3, [pc, #100]	; (8000760 <SystemClock_Config+0xb4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000704:	2302      	movs	r3, #2
 8000706:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000708:	2301      	movs	r3, #1
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800070c:	2310      	movs	r3, #16
 800070e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fa8f 	bl	8001c3c <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000724:	f000 f8a2 	bl	800086c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800072c:	2300      	movs	r3, #0
 800072e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fd28 	bl	8002198 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800074e:	f000 f88d 	bl	800086c <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3750      	adds	r7, #80	; 0x50
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C2_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C2_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C2_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 192;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000776:	22c0      	movs	r2, #192	; 0xc0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C2_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C2_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C2_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C2_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_I2C2_Init+0x74>)
 80007a0:	f000 fcbc 	bl	800111c <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 f85f 	bl	800086c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C2_Init+0x74>)
 80007b2:	f001 f9ab 	bl	8001b0c <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 f856 	bl	800086c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2C2_Init+0x74>)
 80007c4:	f001 f9ed 	bl	8001ba2 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 f84d 	bl	800086c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000048 	.word	0x20000048
 80007dc:	40005800 	.word	0x40005800
 80007e0:	00303d5b 	.word	0x00303d5b

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b083      	sub	sp, #12
 80007e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007ea:	4b09      	ldr	r3, [pc, #36]	; (8000810 <MX_GPIO_Init+0x2c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a08      	ldr	r2, [pc, #32]	; (8000810 <MX_GPIO_Init+0x2c>)
 80007f0:	f043 0320 	orr.w	r3, r3, #32
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <MX_GPIO_Init+0x2c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0320 	and.w	r3, r3, #32
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800

08000814 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000826:	f000 fa51 	bl	8000ccc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800082a:	2301      	movs	r3, #1
 800082c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800082e:	2300      	movs	r3, #0
 8000830:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000836:	231f      	movs	r3, #31
 8000838:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800083a:	2387      	movs	r3, #135	; 0x87
 800083c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800083e:	2300      	movs	r3, #0
 8000840:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000842:	2300      	movs	r3, #0
 8000844:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000846:	2301      	movs	r3, #1
 8000848:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800084a:	2301      	movs	r3, #1
 800084c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800084e:	2300      	movs	r3, #0
 8000850:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000856:	463b      	mov	r3, r7
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fa6f 	bl	8000d3c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800085e:	2004      	movs	r0, #4
 8000860:	f000 fa4c 	bl	8000cfc <HAL_MPU_Enable>

}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000870:	b672      	cpsid	i
}
 8000872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000874:	e7fe      	b.n	8000874 <Error_Handler+0x8>
	...

08000878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800087e:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <HAL_MspInit+0x44>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <HAL_MspInit+0x44>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <HAL_MspInit+0x44>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x44>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x44>)
 800089c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008a0:	6453      	str	r3, [r2, #68]	; 0x44
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x44>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b0ae      	sub	sp, #184	; 0xb8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008cc:	2200      	movs	r2, #0
 80008ce:	601a      	str	r2, [r3, #0]
 80008d0:	605a      	str	r2, [r3, #4]
 80008d2:	609a      	str	r2, [r3, #8]
 80008d4:	60da      	str	r2, [r3, #12]
 80008d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008d8:	f107 0314 	add.w	r3, r7, #20
 80008dc:	2290      	movs	r2, #144	; 0x90
 80008de:	2100      	movs	r1, #0
 80008e0:	4618      	mov	r0, r3
 80008e2:	f002 fa33 	bl	8002d4c <memset>
  if(hi2c->Instance==I2C2)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <HAL_I2C_MspInit+0xb0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d13b      	bne.n	8000968 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80008f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008f4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fdfc 	bl	80024fc <HAL_RCCEx_PeriphCLKConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800090a:	f7ff ffaf 	bl	800086c <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_I2C_MspInit+0xb4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a18      	ldr	r2, [pc, #96]	; (8000974 <HAL_I2C_MspInit+0xb4>)
 8000914:	f043 0320 	orr.w	r3, r3, #32
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_I2C_MspInit+0xb4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0320 	and.w	r3, r3, #32
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000926:	2303      	movs	r3, #3
 8000928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092c:	2312      	movs	r3, #18
 800092e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000938:	2303      	movs	r3, #3
 800093a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800093e:	2304      	movs	r3, #4
 8000940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000944:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000948:	4619      	mov	r1, r3
 800094a:	480b      	ldr	r0, [pc, #44]	; (8000978 <HAL_I2C_MspInit+0xb8>)
 800094c:	f000 fa3a 	bl	8000dc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000950:	4b08      	ldr	r3, [pc, #32]	; (8000974 <HAL_I2C_MspInit+0xb4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a07      	ldr	r2, [pc, #28]	; (8000974 <HAL_I2C_MspInit+0xb4>)
 8000956:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_I2C_MspInit+0xb4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000968:	bf00      	nop
 800096a:	37b8      	adds	r7, #184	; 0xb8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40005800 	.word	0x40005800
 8000974:	40023800 	.word	0x40023800
 8000978:	40021400 	.word	0x40021400

0800097c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000980:	e7fe      	b.n	8000980 <NMI_Handler+0x4>

08000982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <MemManage_Handler+0x4>

0800098e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <UsageFault_Handler+0x4>

0800099a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f87a 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a2c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a10:	4c0b      	ldr	r4, [pc, #44]	; (8000a40 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a1e:	f7ff ffd7 	bl	80009d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a22:	f002 f99b 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a26:	f7ff fe2f 	bl	8000688 <main>
  bx  lr    
 8000a2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a2c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000a38:	08002ddc 	.word	0x08002ddc
  ldr r2, =_sbss
 8000a3c:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000a40:	200000a0 	.word	0x200000a0

08000a44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC_IRQHandler>

08000a46 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4a:	2003      	movs	r0, #3
 8000a4c:	f000 f90a 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a50:	200f      	movs	r0, #15
 8000a52:	f000 f805 	bl	8000a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a56:	f7ff ff0f 	bl	8000878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a68:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <HAL_InitTick+0x54>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <HAL_InitTick+0x58>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 f917 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e00e      	b.n	8000aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d80a      	bhi.n	8000aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a9c:	f000 f8ed 	bl	8000c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <HAL_InitTick+0x5c>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000020 	.word	0x20000020
 8000ab8:	20000028 	.word	0x20000028
 8000abc:	20000024 	.word	0x20000024

08000ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_IncTick+0x24>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4413      	add	r3, r2
 8000ad0:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <HAL_IncTick+0x24>)
 8000ad2:	6013      	str	r3, [r2, #0]
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000028 	.word	0x20000028
 8000ae4:	2000009c 	.word	0x2000009c

08000ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  return uwTick;
 8000aec:	4b03      	ldr	r3, [pc, #12]	; (8000afc <HAL_GetTick+0x14>)
 8000aee:	681b      	ldr	r3, [r3, #0]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	2000009c 	.word	0x2000009c

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <__NVIC_SetPriorityGrouping+0x40>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x40>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00
 8000b44:	05fa0000 	.word	0x05fa0000

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c44:	f7ff ff8e 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff47 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8c:	f7ff ff5c 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff ff8e 	bl	8000bb8 <NVIC_EncodePriority>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff5d 	bl	8000b64 <__NVIC_SetPriority>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ffb0 	bl	8000c20 <SysTick_Config>
 8000cc0:	4603      	mov	r3, r0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000cd0:	f3bf 8f5f 	dmb	sy
}
 8000cd4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <HAL_MPU_Disable+0x28>)
 8000cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cda:	4a06      	ldr	r2, [pc, #24]	; (8000cf4 <HAL_MPU_Disable+0x28>)
 8000cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000ce2:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <HAL_MPU_Disable+0x2c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	605a      	str	r2, [r3, #4]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00
 8000cf8:	e000ed90 	.word	0xe000ed90

08000cfc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000d04:	4a0b      	ldr	r2, [pc, #44]	; (8000d34 <HAL_MPU_Enable+0x38>)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_MPU_Enable+0x3c>)
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	4a09      	ldr	r2, [pc, #36]	; (8000d38 <HAL_MPU_Enable+0x3c>)
 8000d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d18:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000d1a:	f3bf 8f4f 	dsb	sy
}
 8000d1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d20:	f3bf 8f6f 	isb	sy
}
 8000d24:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	e000ed90 	.word	0xe000ed90
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	785a      	ldrb	r2, [r3, #1]
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <HAL_MPU_ConfigRegion+0x84>)
 8000d4a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d029      	beq.n	8000da8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000d54:	4a1a      	ldr	r2, [pc, #104]	; (8000dc0 <HAL_MPU_ConfigRegion+0x84>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7b1b      	ldrb	r3, [r3, #12]
 8000d60:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7adb      	ldrb	r3, [r3, #11]
 8000d66:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d68:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7a9b      	ldrb	r3, [r3, #10]
 8000d6e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	7b5b      	ldrb	r3, [r3, #13]
 8000d76:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	7b9b      	ldrb	r3, [r3, #14]
 8000d7e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	7bdb      	ldrb	r3, [r3, #15]
 8000d86:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7a5b      	ldrb	r3, [r3, #9]
 8000d8e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	7a1b      	ldrb	r3, [r3, #8]
 8000d96:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d98:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000da0:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000da2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000da4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000da6:	e005      	b.n	8000db4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <HAL_MPU_ConfigRegion+0x84>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <HAL_MPU_ConfigRegion+0x84>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	611a      	str	r2, [r3, #16]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000ed90 	.word	0xe000ed90

08000dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b089      	sub	sp, #36	; 0x24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	e175      	b.n	80010d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000de4:	2201      	movs	r2, #1
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	697a      	ldr	r2, [r7, #20]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f040 8164 	bne.w	80010ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f003 0303 	and.w	r3, r3, #3
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d005      	beq.n	8000e1a <HAL_GPIO_Init+0x56>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d130      	bne.n	8000e7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	2203      	movs	r2, #3
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	68da      	ldr	r2, [r3, #12]
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e50:	2201      	movs	r2, #1
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	091b      	lsrs	r3, r3, #4
 8000e66:	f003 0201 	and.w	r2, r3, #1
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b03      	cmp	r3, #3
 8000e86:	d017      	beq.n	8000eb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	2203      	movs	r2, #3
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	43db      	mvns	r3, r3
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	005b      	lsls	r3, r3, #1
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d123      	bne.n	8000f0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	08da      	lsrs	r2, r3, #3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3208      	adds	r2, #8
 8000ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	f003 0307 	and.w	r3, r3, #7
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	08da      	lsrs	r2, r3, #3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	3208      	adds	r2, #8
 8000f06:	69b9      	ldr	r1, [r7, #24]
 8000f08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	2203      	movs	r2, #3
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 0203 	and.w	r2, r3, #3
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f000 80be 	beq.w	80010ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4e:	4b66      	ldr	r3, [pc, #408]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f52:	4a65      	ldr	r2, [pc, #404]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5a:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <HAL_GPIO_Init+0x324>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f66:	4a61      	ldr	r2, [pc, #388]	; (80010ec <HAL_GPIO_Init+0x328>)
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	089b      	lsrs	r3, r3, #2
 8000f6c:	3302      	adds	r3, #2
 8000f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f003 0303 	and.w	r3, r3, #3
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	4013      	ands	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a58      	ldr	r2, [pc, #352]	; (80010f0 <HAL_GPIO_Init+0x32c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d037      	beq.n	8001002 <HAL_GPIO_Init+0x23e>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a57      	ldr	r2, [pc, #348]	; (80010f4 <HAL_GPIO_Init+0x330>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d031      	beq.n	8000ffe <HAL_GPIO_Init+0x23a>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a56      	ldr	r2, [pc, #344]	; (80010f8 <HAL_GPIO_Init+0x334>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d02b      	beq.n	8000ffa <HAL_GPIO_Init+0x236>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a55      	ldr	r2, [pc, #340]	; (80010fc <HAL_GPIO_Init+0x338>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d025      	beq.n	8000ff6 <HAL_GPIO_Init+0x232>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a54      	ldr	r2, [pc, #336]	; (8001100 <HAL_GPIO_Init+0x33c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d01f      	beq.n	8000ff2 <HAL_GPIO_Init+0x22e>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a53      	ldr	r2, [pc, #332]	; (8001104 <HAL_GPIO_Init+0x340>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d019      	beq.n	8000fee <HAL_GPIO_Init+0x22a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a52      	ldr	r2, [pc, #328]	; (8001108 <HAL_GPIO_Init+0x344>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x226>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a51      	ldr	r2, [pc, #324]	; (800110c <HAL_GPIO_Init+0x348>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x222>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a50      	ldr	r2, [pc, #320]	; (8001110 <HAL_GPIO_Init+0x34c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x21e>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a4f      	ldr	r2, [pc, #316]	; (8001114 <HAL_GPIO_Init+0x350>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x21a>
 8000fda:	2309      	movs	r3, #9
 8000fdc:	e012      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fde:	230a      	movs	r3, #10
 8000fe0:	e010      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fe2:	2308      	movs	r3, #8
 8000fe4:	e00e      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fe6:	2307      	movs	r3, #7
 8000fe8:	e00c      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fea:	2306      	movs	r3, #6
 8000fec:	e00a      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000fee:	2305      	movs	r3, #5
 8000ff0:	e008      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	e006      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e004      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	e002      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8000ffe:	2301      	movs	r3, #1
 8001000:	e000      	b.n	8001004 <HAL_GPIO_Init+0x240>
 8001002:	2300      	movs	r3, #0
 8001004:	69fa      	ldr	r2, [r7, #28]
 8001006:	f002 0203 	and.w	r2, r2, #3
 800100a:	0092      	lsls	r2, r2, #2
 800100c:	4093      	lsls	r3, r2
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001014:	4935      	ldr	r1, [pc, #212]	; (80010ec <HAL_GPIO_Init+0x328>)
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	089b      	lsrs	r3, r3, #2
 800101a:	3302      	adds	r3, #2
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_GPIO_Init+0x354>)
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	43db      	mvns	r3, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4013      	ands	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d003      	beq.n	8001046 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001046:	4a34      	ldr	r2, [pc, #208]	; (8001118 <HAL_GPIO_Init+0x354>)
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800104c:	4b32      	ldr	r3, [pc, #200]	; (8001118 <HAL_GPIO_Init+0x354>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001070:	4a29      	ldr	r2, [pc, #164]	; (8001118 <HAL_GPIO_Init+0x354>)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_GPIO_Init+0x354>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800109a:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_GPIO_Init+0x354>)
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <HAL_GPIO_Init+0x354>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <HAL_GPIO_Init+0x354>)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3301      	adds	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	2b0f      	cmp	r3, #15
 80010d4:	f67f ae86 	bls.w	8000de4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3724      	adds	r7, #36	; 0x24
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40013800 	.word	0x40013800
 80010f0:	40020000 	.word	0x40020000
 80010f4:	40020400 	.word	0x40020400
 80010f8:	40020800 	.word	0x40020800
 80010fc:	40020c00 	.word	0x40020c00
 8001100:	40021000 	.word	0x40021000
 8001104:	40021400 	.word	0x40021400
 8001108:	40021800 	.word	0x40021800
 800110c:	40021c00 	.word	0x40021c00
 8001110:	40022000 	.word	0x40022000
 8001114:	40022400 	.word	0x40022400
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e07f      	b.n	800122e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d106      	bne.n	8001148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fbbc 	bl	80008c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2224      	movs	r2, #36	; 0x24
 800114c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0201 	bic.w	r2, r2, #1
 800115e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800116c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800117c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d107      	bne.n	8001196 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689a      	ldr	r2, [r3, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	e006      	b.n	80011a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d104      	bne.n	80011b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	6859      	ldr	r1, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_I2C_Init+0x11c>)
 80011c2:	430b      	orrs	r3, r1
 80011c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	68da      	ldr	r2, [r3, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	691a      	ldr	r2, [r3, #16]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	695b      	ldr	r3, [r3, #20]
 80011de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	430a      	orrs	r2, r1
 80011ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69d9      	ldr	r1, [r3, #28]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a1a      	ldr	r2, [r3, #32]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	430a      	orrs	r2, r1
 80011fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f042 0201 	orr.w	r2, r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2220      	movs	r2, #32
 800121a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	02008000 	.word	0x02008000

0800123c <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b088      	sub	sp, #32
 8001240:	af02      	add	r7, sp, #8
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	4613      	mov	r3, r2
 800124a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b20      	cmp	r3, #32
 8001256:	f040 8109 	bne.w	800146c <HAL_I2C_Slave_Transmit+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800125a:	68bb      	ldr	r3, [r7, #8]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d002      	beq.n	8001266 <HAL_I2C_Slave_Transmit+0x2a>
 8001260:	88fb      	ldrh	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d105      	bne.n	8001272 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f44f 7200 	mov.w	r2, #512	; 0x200
 800126c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e0fd      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001278:	2b01      	cmp	r3, #1
 800127a:	d101      	bne.n	8001280 <HAL_I2C_Slave_Transmit+0x44>
 800127c:	2302      	movs	r3, #2
 800127e:	e0f6      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001288:	f7ff fc2e 	bl	8000ae8 <HAL_GetTick>
 800128c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2221      	movs	r2, #33	; 0x21
 8001292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	2220      	movs	r2, #32
 800129a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2200      	movs	r2, #0
 80012a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	88fa      	ldrh	r2, [r7, #6]
 80012ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2200      	movs	r2, #0
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012c4:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	9300      	str	r3, [sp, #0]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	2108      	movs	r1, #8
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fa04 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d009      	beq.n	80012f0 <HAL_I2C_Slave_Transmit+0xb4>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ea:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e0be      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2208      	movs	r2, #8
 80012f6:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d118      	bne.n	8001332 <HAL_I2C_Slave_Transmit+0xf6>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	2108      	movs	r1, #8
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f000 f9e7 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <HAL_I2C_Slave_Transmit+0xee>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001324:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0a1      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2208      	movs	r2, #8
 8001330:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	2200      	movs	r2, #0
 800133a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f000 f9cd 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d02d      	beq.n	80013a6 <HAL_I2C_Slave_Transmit+0x16a>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001358:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e087      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	6839      	ldr	r1, [r7, #0]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f000 f9fb 	bl	800175e <I2C_WaitOnTXISFlagUntilTimeout>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <HAL_I2C_Slave_Transmit+0x146>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800137c:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e075      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	1c5a      	adds	r2, r3, #1
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800139c:	b29b      	uxth	r3, r3
 800139e:	3b01      	subs	r3, #1
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferCount > 0U)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1d6      	bne.n	800135e <HAL_I2C_Slave_Transmit+0x122>
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	2110      	movs	r1, #16
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f98f 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_I2C_Slave_Transmit+0x19e>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d4:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e049      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 f95b 	bl	8001696 <I2C_Flush_TXDR>

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	2210      	movs	r2, #16
 80013e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	6839      	ldr	r1, [r7, #0]
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f9f6 	bl	80017de <I2C_WaitOnSTOPFlagUntilTimeout>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d009      	beq.n	800140c <HAL_I2C_Slave_Transmit+0x1d0>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001406:	605a      	str	r2, [r3, #4]

      return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e030      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	2220      	movs	r2, #32
 8001412:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f95c 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d009      	beq.n	8001440 <HAL_I2C_Slave_Transmit+0x204>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800143a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e016      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800144e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	2220      	movs	r2, #32
 8001454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	2200      	movs	r2, #0
 8001464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001468:	2300      	movs	r3, #0
 800146a:	e000      	b.n	800146e <HAL_I2C_Slave_Transmit+0x232>
  }
  else
  {
    return HAL_BUSY;
 800146c:	2302      	movs	r3, #2
  }
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <HAL_I2C_Slave_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                        uint32_t Timeout)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b088      	sub	sp, #32
 800147a:	af02      	add	r7, sp, #8
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	603b      	str	r3, [r7, #0]
 8001482:	4613      	mov	r3, r2
 8001484:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b20      	cmp	r3, #32
 8001490:	f040 80fc 	bne.w	800168c <HAL_I2C_Slave_Receive+0x216>
  {
    if ((pData == NULL) || (Size == 0U))
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d002      	beq.n	80014a0 <HAL_I2C_Slave_Receive+0x2a>
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d105      	bne.n	80014ac <HAL_I2C_Slave_Receive+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e0f0      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d101      	bne.n	80014ba <HAL_I2C_Slave_Receive+0x44>
 80014b6:	2302      	movs	r3, #2
 80014b8:	e0e9      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014c2:	f7ff fb11 	bl	8000ae8 <HAL_GetTick>
 80014c6:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2222      	movs	r2, #34	; 0x22
 80014cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2220      	movs	r2, #32
 80014d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2200      	movs	r2, #0
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	68ba      	ldr	r2, [r7, #8]
 80014e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	88fa      	ldrh	r2, [r7, #6]
 80014e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize = hi2c->XferCount;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferISR   = NULL;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2200      	movs	r2, #0
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001508:	605a      	str	r2, [r3, #4]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	2200      	movs	r2, #0
 8001512:	2108      	movs	r1, #8
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f000 f8e2 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <HAL_I2C_Slave_Receive+0xbe>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685a      	ldr	r2, [r3, #4]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800152e:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e0ac      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2208      	movs	r2, #8
 800153a:	61da      	str	r2, [r3, #28]

    /* Wait until DIR flag is reset Receiver mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, SET, Timeout, tickstart) != HAL_OK)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	2201      	movs	r2, #1
 8001544:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f000 f8c8 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d054      	beq.n	80015fe <HAL_I2C_Slave_Receive+0x188>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001562:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e092      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f973 	bl	8001858 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d029      	beq.n	80015cc <HAL_I2C_Slave_Receive+0x156>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001586:	605a      	str	r2, [r3, #4]

        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	2b04      	cmp	r3, #4
 8001594:	d118      	bne.n	80015c8 <HAL_I2C_Slave_Receive+0x152>
        {
          /* Read data from RXDR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	b2d2      	uxtb	r2, r2
 80015a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	1c5a      	adds	r2, r3, #1
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	625a      	str	r2, [r3, #36]	; 0x24

          hi2c->XferCount--;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3b01      	subs	r3, #1
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	855a      	strh	r2, [r3, #42]	; 0x2a
          hi2c->XferSize--;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c0:	3b01      	subs	r3, #1
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	851a      	strh	r2, [r3, #40]	; 0x28
        }

        return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e060      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	3b01      	subs	r3, #1
 80015ec:	b29a      	uxth	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferCount > 0U)
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001602:	b29b      	uxth	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1af      	bne.n	8001568 <HAL_I2C_Slave_Receive+0xf2>
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	68f8      	ldr	r0, [r7, #12]
 800160e:	f000 f8e6 	bl	80017de <I2C_WaitOnSTOPFlagUntilTimeout>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d009      	beq.n	800162c <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001626:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e030      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2220      	movs	r2, #32
 8001632:	61da      	str	r2, [r3, #28]

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f84c 	bl	80016de <I2C_WaitOnFlagUntilTimeout>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d009      	beq.n	8001660 <HAL_I2C_Slave_Receive+0x1ea>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800165a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e016      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800166e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	e000      	b.n	800168e <HAL_I2C_Slave_Receive+0x218>
  }
  else
  {
    return HAL_BUSY;
 800168c:	2302      	movs	r3, #2
  }
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001696:	b480      	push	{r7}
 8001698:	b083      	sub	sp, #12
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d103      	bne.n	80016b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2200      	movs	r2, #0
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d007      	beq.n	80016d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699a      	ldr	r2, [r3, #24]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f042 0201 	orr.w	r2, r2, #1
 80016d0:	619a      	str	r2, [r3, #24]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b084      	sub	sp, #16
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	60f8      	str	r0, [r7, #12]
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	4613      	mov	r3, r2
 80016ec:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ee:	e022      	b.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016f6:	d01e      	beq.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016f8:	f7ff f9f6 	bl	8000ae8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d302      	bcc.n	800170e <I2C_WaitOnFlagUntilTimeout+0x30>
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d113      	bne.n	8001736 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	f043 0220 	orr.w	r2, r3, #32
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2220      	movs	r2, #32
 800171e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	699a      	ldr	r2, [r3, #24]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	4013      	ands	r3, r2
 8001740:	68ba      	ldr	r2, [r7, #8]
 8001742:	429a      	cmp	r2, r3
 8001744:	bf0c      	ite	eq
 8001746:	2301      	moveq	r3, #1
 8001748:	2300      	movne	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	429a      	cmp	r2, r3
 8001752:	d0cd      	beq.n	80016f0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800176a:	e02c      	b.n	80017c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	68f8      	ldr	r0, [r7, #12]
 8001772:	f000 f8eb 	bl	800194c <I2C_IsErrorOccurred>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e02a      	b.n	80017d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001786:	d01e      	beq.n	80017c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001788:	f7ff f9ae 	bl	8000ae8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68ba      	ldr	r2, [r7, #8]
 8001794:	429a      	cmp	r2, r3
 8001796:	d302      	bcc.n	800179e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d113      	bne.n	80017c6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a2:	f043 0220 	orr.w	r2, r3, #32
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e007      	b.n	80017d6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d1cb      	bne.n	800176c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}

080017de <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ea:	e028      	b.n	800183e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f000 f8ab 	bl	800194c <I2C_IsErrorOccurred>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	e026      	b.n	800184e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001800:	f7ff f972 	bl	8000ae8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	429a      	cmp	r2, r3
 800180e:	d302      	bcc.n	8001816 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d113      	bne.n	800183e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f043 0220 	orr.w	r2, r3, #32
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2220      	movs	r2, #32
 8001826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e007      	b.n	800184e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b20      	cmp	r3, #32
 800184a:	d1cf      	bne.n	80017ec <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001864:	e064      	b.n	8001930 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f86e 	bl	800194c <I2C_IsErrorOccurred>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e062      	b.n	8001940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d138      	bne.n	80018fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d105      	bne.n	80018a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e04e      	b.n	8001940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	d107      	bne.n	80018c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2210      	movs	r2, #16
 80018b6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2204      	movs	r2, #4
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
 80018be:	e002      	b.n	80018c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2220      	movs	r2, #32
 80018cc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6859      	ldr	r1, [r3, #4]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80018da:	400b      	ands	r3, r1
 80018dc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	2220      	movs	r2, #32
 80018e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e022      	b.n	8001940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018fa:	f7ff f8f5 	bl	8000ae8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	429a      	cmp	r2, r3
 8001908:	d302      	bcc.n	8001910 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d10f      	bne.n	8001930 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2220      	movs	r2, #32
 8001920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e007      	b.n	8001940 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	699b      	ldr	r3, [r3, #24]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b04      	cmp	r3, #4
 800193c:	d193      	bne.n	8001866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	fe00e800 	.word	0xfe00e800

0800194c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d068      	beq.n	8001a4a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2210      	movs	r2, #16
 800197e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001980:	e049      	b.n	8001a16 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001988:	d045      	beq.n	8001a16 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800198a:	f7ff f8ad 	bl	8000ae8 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	d302      	bcc.n	80019a0 <I2C_IsErrorOccurred+0x54>
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d13a      	bne.n	8001a16 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c2:	d121      	bne.n	8001a08 <I2C_IsErrorOccurred+0xbc>
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019ca:	d01d      	beq.n	8001a08 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80019cc:	7cfb      	ldrb	r3, [r7, #19]
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d01a      	beq.n	8001a08 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80019e2:	f7ff f881 	bl	8000ae8 <HAL_GetTick>
 80019e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019e8:	e00e      	b.n	8001a08 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80019ea:	f7ff f87d 	bl	8000ae8 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b19      	cmp	r3, #25
 80019f6:	d907      	bls.n	8001a08 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001a06:	e006      	b.n	8001a16 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	f003 0320 	and.w	r3, r3, #32
 8001a12:	2b20      	cmp	r3, #32
 8001a14:	d1e9      	bne.n	80019ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b20      	cmp	r3, #32
 8001a22:	d003      	beq.n	8001a2c <I2C_IsErrorOccurred+0xe0>
 8001a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d0aa      	beq.n	8001982 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001a2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d103      	bne.n	8001a3c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	f043 0304 	orr.w	r3, r3, #4
 8001a42:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00b      	beq.n	8001a74 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001a5c:	6a3b      	ldr	r3, [r7, #32]
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00b      	beq.n	8001a96 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f043 0308 	orr.w	r3, r3, #8
 8001a84:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a8e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00b      	beq.n	8001ab8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	f043 0302 	orr.w	r3, r3, #2
 8001aa6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d01c      	beq.n	8001afa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f7ff fde8 	bl	8001696 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6859      	ldr	r1, [r3, #4]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <I2C_IsErrorOccurred+0x1bc>)
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3728      	adds	r7, #40	; 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	fe00e800 	.word	0xfe00e800

08001b0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b20      	cmp	r3, #32
 8001b20:	d138      	bne.n	8001b94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e032      	b.n	8001b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	; 0x24
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0201 	bic.w	r2, r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b085      	sub	sp, #20
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b20      	cmp	r3, #32
 8001bb6:	d139      	bne.n	8001c2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e033      	b.n	8001c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2224      	movs	r2, #36	; 0x24
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001bf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	e000      	b.n	8001c2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
  }
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e29b      	b.n	800218a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f000 8087 	beq.w	8001d6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c60:	4b96      	ldr	r3, [pc, #600]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 030c 	and.w	r3, r3, #12
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d00c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6c:	4b93      	ldr	r3, [pc, #588]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d112      	bne.n	8001c9e <HAL_RCC_OscConfig+0x62>
 8001c78:	4b90      	ldr	r3, [pc, #576]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c84:	d10b      	bne.n	8001c9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c86:	4b8d      	ldr	r3, [pc, #564]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d06c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x130>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d168      	bne.n	8001d6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e275      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x7a>
 8001ca8:	4b84      	ldr	r3, [pc, #528]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a83      	ldr	r2, [pc, #524]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb2:	6013      	str	r3, [r2, #0]
 8001cb4:	e02e      	b.n	8001d14 <HAL_RCC_OscConfig+0xd8>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x9c>
 8001cbe:	4b7f      	ldr	r3, [pc, #508]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7e      	ldr	r2, [pc, #504]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b7c      	ldr	r3, [pc, #496]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a7b      	ldr	r2, [pc, #492]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xd8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0xc0>
 8001ce2:	4b76      	ldr	r3, [pc, #472]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a75      	ldr	r2, [pc, #468]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b73      	ldr	r3, [pc, #460]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a72      	ldr	r2, [pc, #456]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xd8>
 8001cfc:	4b6f      	ldr	r3, [pc, #444]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a6e      	ldr	r2, [pc, #440]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b6c      	ldr	r3, [pc, #432]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a6b      	ldr	r2, [pc, #428]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fee4 	bl	8000ae8 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7fe fee0 	bl	8000ae8 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e229      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b61      	ldr	r3, [pc, #388]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xe8>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d44:	f7fe fed0 	bl	8000ae8 <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7fe fecc 	bl	8000ae8 <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e215      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x110>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d069      	beq.n	8001e4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d86:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x190>
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x17a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1e9      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	493d      	ldr	r1, [pc, #244]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e040      	b.n	8001e4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d023      	beq.n	8001e1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7fe fe82 	bl	8000ae8 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de8:	f7fe fe7e 	bl	8000ae8 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1c7      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b30      	ldr	r3, [pc, #192]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4929      	ldr	r1, [pc, #164]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
 8001e1a:	e018      	b.n	8001e4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1c:	4b27      	ldr	r3, [pc, #156]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a26      	ldr	r2, [pc, #152]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e22:	f023 0301 	bic.w	r3, r3, #1
 8001e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7fe fe5e 	bl	8000ae8 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e30:	f7fe fe5a 	bl	8000ae8 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e1a3      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e42:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1f0      	bne.n	8001e30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d038      	beq.n	8001ecc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d019      	beq.n	8001e96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e62:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e66:	4a15      	ldr	r2, [pc, #84]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7fe fe3b 	bl	8000ae8 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e76:	f7fe fe37 	bl	8000ae8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e180      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x23a>
 8001e94:	e01a      	b.n	8001ecc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9a:	4a08      	ldr	r2, [pc, #32]	; (8001ebc <HAL_RCC_OscConfig+0x280>)
 8001e9c:	f023 0301 	bic.w	r3, r3, #1
 8001ea0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea2:	f7fe fe21 	bl	8000ae8 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fe1d 	bl	8000ae8 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d903      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e166      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
 8001ebc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b92      	ldr	r3, [pc, #584]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1ee      	bne.n	8001eaa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a4 	beq.w	8002022 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b8c      	ldr	r3, [pc, #560]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10d      	bne.n	8001f02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b89      	ldr	r3, [pc, #548]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a88      	ldr	r2, [pc, #544]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b86      	ldr	r3, [pc, #536]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001efe:	2301      	movs	r3, #1
 8001f00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f02:	4b83      	ldr	r3, [pc, #524]	; (8002110 <HAL_RCC_OscConfig+0x4d4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d118      	bne.n	8001f40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001f0e:	4b80      	ldr	r3, [pc, #512]	; (8002110 <HAL_RCC_OscConfig+0x4d4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a7f      	ldr	r2, [pc, #508]	; (8002110 <HAL_RCC_OscConfig+0x4d4>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1a:	f7fe fde5 	bl	8000ae8 <HAL_GetTick>
 8001f1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f22:	f7fe fde1 	bl	8000ae8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b64      	cmp	r3, #100	; 0x64
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e12a      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x4d4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x31a>
 8001f48:	4b70      	ldr	r3, [pc, #448]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	4a6f      	ldr	r2, [pc, #444]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6713      	str	r3, [r2, #112]	; 0x70
 8001f54:	e02d      	b.n	8001fb2 <HAL_RCC_OscConfig+0x376>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x33c>
 8001f5e:	4b6b      	ldr	r3, [pc, #428]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f62:	4a6a      	ldr	r2, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6a:	4b68      	ldr	r3, [pc, #416]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a67      	ldr	r2, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	e01c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x376>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x35e>
 8001f80:	4b62      	ldr	r3, [pc, #392]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a61      	ldr	r2, [pc, #388]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	4b5f      	ldr	r3, [pc, #380]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a5e      	ldr	r2, [pc, #376]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x376>
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a5b      	ldr	r2, [pc, #364]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa6:	4b59      	ldr	r3, [pc, #356]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a58      	ldr	r2, [pc, #352]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d015      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7fe fd95 	bl	8000ae8 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7fe fd91 	bl	8000ae8 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0d8      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x386>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe6:	f7fe fd7f 	bl	8000ae8 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7fe fd7b 	bl	8000ae8 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0c2      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	4b41      	ldr	r3, [pc, #260]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ee      	bne.n	8001fee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002016:	4b3d      	ldr	r3, [pc, #244]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a3c      	ldr	r2, [pc, #240]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 800201c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 80ae 	beq.w	8002188 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202c:	4b37      	ldr	r3, [pc, #220]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d06d      	beq.n	8002114 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d14b      	bne.n	80020d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b32      	ldr	r3, [pc, #200]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a31      	ldr	r2, [pc, #196]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8002046:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800204a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204c:	f7fe fd4c 	bl	8000ae8 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7fe fd48 	bl	8000ae8 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e091      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002066:	4b29      	ldr	r3, [pc, #164]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	69da      	ldr	r2, [r3, #28]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	431a      	orrs	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	431a      	orrs	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	3b01      	subs	r3, #1
 800208c:	041b      	lsls	r3, r3, #16
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	431a      	orrs	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209c:	071b      	lsls	r3, r3, #28
 800209e:	491b      	ldr	r1, [pc, #108]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 80020aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b0:	f7fe fd1a 	bl	8000ae8 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fd16 	bl	8000ae8 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e05f      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d0f0      	beq.n	80020b8 <HAL_RCC_OscConfig+0x47c>
 80020d6:	e057      	b.n	8002188 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0b      	ldr	r2, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 80020de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7fe fd00 	bl	8000ae8 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7fe fcfc 	bl	8000ae8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e045      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fe:	4b03      	ldr	r3, [pc, #12]	; (800210c <HAL_RCC_OscConfig+0x4d0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x4b0>
 800210a:	e03d      	b.n	8002188 <HAL_RCC_OscConfig+0x54c>
 800210c:	40023800 	.word	0x40023800
 8002110:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002114:	4b1f      	ldr	r3, [pc, #124]	; (8002194 <HAL_RCC_OscConfig+0x558>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d030      	beq.n	8002184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d129      	bne.n	8002184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d122      	bne.n	8002184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002144:	4013      	ands	r3, r2
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800214a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800214c:	4293      	cmp	r3, r2
 800214e:	d119      	bne.n	8002184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	3b01      	subs	r3, #1
 800215e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d10f      	bne.n	8002184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002170:	429a      	cmp	r2, r3
 8002172:	d107      	bne.n	8002184 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e0d0      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b6a      	ldr	r3, [pc, #424]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b67      	ldr	r3, [pc, #412]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	4965      	ldr	r1, [pc, #404]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b63      	ldr	r3, [pc, #396]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0b8      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d020      	beq.n	800222e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d005      	beq.n	8002204 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021f8:	4b59      	ldr	r3, [pc, #356]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	4a58      	ldr	r2, [pc, #352]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 80021fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002202:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002210:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	4a52      	ldr	r2, [pc, #328]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002216:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800221a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	494d      	ldr	r1, [pc, #308]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d040      	beq.n	80022bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002242:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d115      	bne.n	800227a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e07f      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	2b02      	cmp	r3, #2
 8002258:	d107      	bne.n	800226a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225a:	4b41      	ldr	r3, [pc, #260]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d109      	bne.n	800227a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e073      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226a:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06b      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f023 0203 	bic.w	r2, r3, #3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4936      	ldr	r1, [pc, #216]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800228c:	f7fe fc2c 	bl	8000ae8 <HAL_GetTick>
 8002290:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002292:	e00a      	b.n	80022aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002294:	f7fe fc28 	bl	8000ae8 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e053      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022aa:	4b2d      	ldr	r3, [pc, #180]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 020c 	and.w	r2, r3, #12
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d1eb      	bne.n	8002294 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022bc:	4b27      	ldr	r3, [pc, #156]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 030f 	and.w	r3, r3, #15
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d210      	bcs.n	80022ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ca:	4b24      	ldr	r3, [pc, #144]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f023 020f 	bic.w	r2, r3, #15
 80022d2:	4922      	ldr	r1, [pc, #136]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022da:	4b20      	ldr	r3, [pc, #128]	; (800235c <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e032      	b.n	8002352 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022f8:	4b19      	ldr	r3, [pc, #100]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4916      	ldr	r1, [pc, #88]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002306:	4313      	orrs	r3, r2
 8002308:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d009      	beq.n	800232a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	00db      	lsls	r3, r3, #3
 8002324:	490e      	ldr	r1, [pc, #56]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232a:	f000 f821 	bl	8002370 <HAL_RCC_GetSysClockFreq>
 800232e:	4602      	mov	r2, r0
 8002330:	4b0b      	ldr	r3, [pc, #44]	; (8002360 <HAL_RCC_ClockConfig+0x1c8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	490a      	ldr	r1, [pc, #40]	; (8002364 <HAL_RCC_ClockConfig+0x1cc>)
 800233c:	5ccb      	ldrb	r3, [r1, r3]
 800233e:	fa22 f303 	lsr.w	r3, r2, r3
 8002342:	4a09      	ldr	r2, [pc, #36]	; (8002368 <HAL_RCC_ClockConfig+0x1d0>)
 8002344:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1d4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fb88 	bl	8000a60 <HAL_InitTick>

  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40023c00 	.word	0x40023c00
 8002360:	40023800 	.word	0x40023800
 8002364:	08002dbc 	.word	0x08002dbc
 8002368:	20000020 	.word	0x20000020
 800236c:	20000024 	.word	0x20000024

08002370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002374:	b090      	sub	sp, #64	; 0x40
 8002376:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	637b      	str	r3, [r7, #52]	; 0x34
 800237c:	2300      	movs	r3, #0
 800237e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002380:	2300      	movs	r3, #0
 8002382:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002388:	4b59      	ldr	r3, [pc, #356]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d00d      	beq.n	80023b0 <HAL_RCC_GetSysClockFreq+0x40>
 8002394:	2b08      	cmp	r3, #8
 8002396:	f200 80a1 	bhi.w	80024dc <HAL_RCC_GetSysClockFreq+0x16c>
 800239a:	2b00      	cmp	r3, #0
 800239c:	d002      	beq.n	80023a4 <HAL_RCC_GetSysClockFreq+0x34>
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d003      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x3a>
 80023a2:	e09b      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023a4:	4b53      	ldr	r3, [pc, #332]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80023a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023a8:	e09b      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023aa:	4b53      	ldr	r3, [pc, #332]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023ae:	e098      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023b0:	4b4f      	ldr	r3, [pc, #316]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80023ba:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d028      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023c6:	4b4a      	ldr	r3, [pc, #296]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	099b      	lsrs	r3, r3, #6
 80023cc:	2200      	movs	r2, #0
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	627a      	str	r2, [r7, #36]	; 0x24
 80023d2:	6a3b      	ldr	r3, [r7, #32]
 80023d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80023d8:	2100      	movs	r1, #0
 80023da:	4b47      	ldr	r3, [pc, #284]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023dc:	fb03 f201 	mul.w	r2, r3, r1
 80023e0:	2300      	movs	r3, #0
 80023e2:	fb00 f303 	mul.w	r3, r0, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	4a43      	ldr	r2, [pc, #268]	; (80024f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80023ea:	fba0 1202 	umull	r1, r2, r0, r2
 80023ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80023f0:	460a      	mov	r2, r1
 80023f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80023f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023f6:	4413      	add	r3, r2
 80023f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fc:	2200      	movs	r2, #0
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	61fa      	str	r2, [r7, #28]
 8002402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002406:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800240a:	f7fd ff15 	bl	8000238 <__aeabi_uldivmod>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4613      	mov	r3, r2
 8002414:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002416:	e053      	b.n	80024c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	099b      	lsrs	r3, r3, #6
 800241e:	2200      	movs	r2, #0
 8002420:	613b      	str	r3, [r7, #16]
 8002422:	617a      	str	r2, [r7, #20]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800242a:	f04f 0b00 	mov.w	fp, #0
 800242e:	4652      	mov	r2, sl
 8002430:	465b      	mov	r3, fp
 8002432:	f04f 0000 	mov.w	r0, #0
 8002436:	f04f 0100 	mov.w	r1, #0
 800243a:	0159      	lsls	r1, r3, #5
 800243c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002440:	0150      	lsls	r0, r2, #5
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	ebb2 080a 	subs.w	r8, r2, sl
 800244a:	eb63 090b 	sbc.w	r9, r3, fp
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800245a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800245e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002462:	ebb2 0408 	subs.w	r4, r2, r8
 8002466:	eb63 0509 	sbc.w	r5, r3, r9
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	00eb      	lsls	r3, r5, #3
 8002474:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002478:	00e2      	lsls	r2, r4, #3
 800247a:	4614      	mov	r4, r2
 800247c:	461d      	mov	r5, r3
 800247e:	eb14 030a 	adds.w	r3, r4, sl
 8002482:	603b      	str	r3, [r7, #0]
 8002484:	eb45 030b 	adc.w	r3, r5, fp
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002496:	4629      	mov	r1, r5
 8002498:	028b      	lsls	r3, r1, #10
 800249a:	4621      	mov	r1, r4
 800249c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024a0:	4621      	mov	r1, r4
 80024a2:	028a      	lsls	r2, r1, #10
 80024a4:	4610      	mov	r0, r2
 80024a6:	4619      	mov	r1, r3
 80024a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024aa:	2200      	movs	r2, #0
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	60fa      	str	r2, [r7, #12]
 80024b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024b4:	f7fd fec0 	bl	8000238 <__aeabi_uldivmod>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	4613      	mov	r3, r2
 80024be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	3301      	adds	r3, #1
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80024d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024da:	e002      	b.n	80024e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024dc:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80024e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	3740      	adds	r7, #64	; 0x40
 80024e8:	46bd      	mov	sp, r7
 80024ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	00f42400 	.word	0x00f42400
 80024f8:	017d7840 	.word	0x017d7840

080024fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002514:	2300      	movs	r3, #0
 8002516:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002524:	4b69      	ldr	r3, [pc, #420]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	4a68      	ldr	r2, [pc, #416]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800252a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800252e:	6093      	str	r3, [r2, #8]
 8002530:	4b66      	ldr	r3, [pc, #408]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002538:	4964      	ldr	r1, [pc, #400]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253a:	4313      	orrs	r3, r2
 800253c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002546:	2301      	movs	r3, #1
 8002548:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d017      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002556:	4b5d      	ldr	r3, [pc, #372]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002558:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800255c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002564:	4959      	ldr	r1, [pc, #356]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002570:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002574:	d101      	bne.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002576:	2301      	movs	r3, #1
 8002578:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002582:	2301      	movs	r3, #1
 8002584:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d017      	beq.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002592:	4b4e      	ldr	r3, [pc, #312]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002598:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	494a      	ldr	r1, [pc, #296]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025b0:	d101      	bne.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d101      	bne.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 808b 	beq.w	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	4a39      	ldr	r2, [pc, #228]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025ea:	6413      	str	r3, [r2, #64]	; 0x40
 80025ec:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f4:	60bb      	str	r3, [r7, #8]
 80025f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025f8:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a34      	ldr	r2, [pc, #208]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80025fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002602:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002604:	f7fe fa70 	bl	8000ae8 <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260c:	f7fe fa6c 	bl	8000ae8 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b64      	cmp	r3, #100	; 0x64
 8002618:	d901      	bls.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e38f      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002632:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d035      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	429a      	cmp	r2, r3
 8002646:	d02e      	beq.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002650:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002652:	4b1e      	ldr	r3, [pc, #120]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a1d      	ldr	r2, [pc, #116]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800266a:	4a18      	ldr	r2, [pc, #96]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002670:	4b16      	ldr	r3, [pc, #88]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d114      	bne.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fa34 	bl	8000ae8 <HAL_GetTick>
 8002680:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002682:	e00a      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7fe fa30 	bl	8000ae8 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e351      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800269c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0ee      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026b2:	d111      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026c2:	400b      	ands	r3, r1
 80026c4:	4901      	ldr	r1, [pc, #4]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	608b      	str	r3, [r1, #8]
 80026ca:	e00b      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40007000 	.word	0x40007000
 80026d4:	0ffffcff 	.word	0x0ffffcff
 80026d8:	4bac      	ldr	r3, [pc, #688]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	4aab      	ldr	r2, [pc, #684]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026e2:	6093      	str	r3, [r2, #8]
 80026e4:	4ba9      	ldr	r3, [pc, #676]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	49a6      	ldr	r1, [pc, #664]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0310 	and.w	r3, r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d010      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002702:	4ba2      	ldr	r3, [pc, #648]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002708:	4aa0      	ldr	r2, [pc, #640]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800270a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002712:	4b9e      	ldr	r3, [pc, #632]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002714:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800271c:	499b      	ldr	r1, [pc, #620]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002730:	4b96      	ldr	r3, [pc, #600]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800273e:	4993      	ldr	r1, [pc, #588]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002752:	4b8e      	ldr	r3, [pc, #568]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002758:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002760:	498a      	ldr	r1, [pc, #552]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00a      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002774:	4b85      	ldr	r3, [pc, #532]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002782:	4982      	ldr	r1, [pc, #520]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002796:	4b7d      	ldr	r3, [pc, #500]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a4:	4979      	ldr	r1, [pc, #484]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00a      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b8:	4b74      	ldr	r3, [pc, #464]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4971      	ldr	r1, [pc, #452]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027da:	4b6c      	ldr	r3, [pc, #432]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f023 020c 	bic.w	r2, r3, #12
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	4968      	ldr	r1, [pc, #416]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027fc:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	4960      	ldr	r1, [pc, #384]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800280c:	4313      	orrs	r3, r2
 800280e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00a      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800281e:	4b5b      	ldr	r3, [pc, #364]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800282c:	4957      	ldr	r1, [pc, #348]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282e:	4313      	orrs	r3, r2
 8002830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002840:	4b52      	ldr	r3, [pc, #328]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002846:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284e:	494f      	ldr	r1, [pc, #316]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002862:	4b4a      	ldr	r3, [pc, #296]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002868:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002870:	4946      	ldr	r1, [pc, #280]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002884:	4b41      	ldr	r3, [pc, #260]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	493e      	ldr	r1, [pc, #248]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80028a6:	4b39      	ldr	r3, [pc, #228]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028b4:	4935      	ldr	r1, [pc, #212]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80028c8:	4b30      	ldr	r3, [pc, #192]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028d6:	492d      	ldr	r1, [pc, #180]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d011      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80028ea:	4b28      	ldr	r3, [pc, #160]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028f8:	4924      	ldr	r1, [pc, #144]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002908:	d101      	bne.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800290a:	2301      	movs	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800291a:	2301      	movs	r3, #1
 800291c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00a      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800292a:	4b18      	ldr	r3, [pc, #96]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002938:	4914      	ldr	r1, [pc, #80]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00b      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800294e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002952:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800295c:	490b      	ldr	r1, [pc, #44]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800295e:	4313      	orrs	r3, r2
 8002960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00f      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002976:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002980:	4902      	ldr	r1, [pc, #8]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002988:	e002      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800299c:	4b8a      	ldr	r3, [pc, #552]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800299e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ac:	4986      	ldr	r1, [pc, #536]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029c0:	4b81      	ldr	r3, [pc, #516]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029d0:	497d      	ldr	r1, [pc, #500]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d006      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80d6 	beq.w	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029ec:	4b76      	ldr	r3, [pc, #472]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a75      	ldr	r2, [pc, #468]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fe f876 	bl	8000ae8 <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a00:	f7fe f872 	bl	8000ae8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e195      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002a12:	4b6d      	ldr	r3, [pc, #436]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d021      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d11d      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a32:	4b65      	ldr	r3, [pc, #404]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a38:	0c1b      	lsrs	r3, r3, #16
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002a40:	4b61      	ldr	r3, [pc, #388]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a46:	0e1b      	lsrs	r3, r3, #24
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	019a      	lsls	r2, r3, #6
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	071b      	lsls	r3, r3, #28
 8002a66:	4958      	ldr	r1, [pc, #352]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d004      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d02e      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a98:	d129      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002a9a:	4b4b      	ldr	r3, [pc, #300]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa0:	0c1b      	lsrs	r3, r3, #16
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002aa8:	4b47      	ldr	r3, [pc, #284]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	0f1b      	lsrs	r3, r3, #28
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	019a      	lsls	r2, r3, #6
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	041b      	lsls	r3, r3, #16
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	061b      	lsls	r3, r3, #24
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	071b      	lsls	r3, r3, #28
 8002ace:	493e      	ldr	r1, [pc, #248]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002adc:	f023 021f 	bic.w	r2, r3, #31
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	4938      	ldr	r1, [pc, #224]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d01d      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002afa:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002afc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b00:	0e1b      	lsrs	r3, r3, #24
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002b08:	4b2f      	ldr	r3, [pc, #188]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b0e:	0f1b      	lsrs	r3, r3, #28
 8002b10:	f003 0307 	and.w	r3, r3, #7
 8002b14:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	019a      	lsls	r2, r3, #6
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	041b      	lsls	r3, r3, #16
 8002b22:	431a      	orrs	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	071b      	lsls	r3, r3, #28
 8002b2e:	4926      	ldr	r1, [pc, #152]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	019a      	lsls	r2, r3, #6
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	041b      	lsls	r3, r3, #16
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	061b      	lsls	r3, r3, #24
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	071b      	lsls	r3, r3, #28
 8002b5e:	491a      	ldr	r1, [pc, #104]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b72:	f7fd ffb9 	bl	8000ae8 <HAL_GetTick>
 8002b76:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b7a:	f7fd ffb5 	bl	8000ae8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b64      	cmp	r3, #100	; 0x64
 8002b86:	d901      	bls.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0d8      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002b8c:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	f040 80ce 	bne.w	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a08      	ldr	r2, [pc, #32]	; (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ba6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002baa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fd ff9c 	bl	8000ae8 <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bb2:	e00b      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bb4:	f7fd ff98 	bl	8000ae8 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b64      	cmp	r3, #100	; 0x64
 8002bc0:	d904      	bls.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e0bb      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002bc6:	bf00      	nop
 8002bc8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002bcc:	4b5e      	ldr	r3, [pc, #376]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd8:	d0ec      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d02e      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d12a      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002c02:	4b51      	ldr	r3, [pc, #324]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c10:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c16:	0f1b      	lsrs	r3, r3, #28
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	019a      	lsls	r2, r3, #6
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	061b      	lsls	r3, r3, #24
 8002c30:	431a      	orrs	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	071b      	lsls	r3, r3, #28
 8002c36:	4944      	ldr	r1, [pc, #272]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002c3e:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	493d      	ldr	r1, [pc, #244]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d022      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c6c:	d11d      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	0e1b      	lsrs	r3, r3, #24
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002c7c:	4b32      	ldr	r3, [pc, #200]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	0f1b      	lsrs	r3, r3, #28
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	019a      	lsls	r2, r3, #6
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	061b      	lsls	r3, r3, #24
 8002c9c:	431a      	orrs	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	071b      	lsls	r3, r3, #28
 8002ca2:	4929      	ldr	r1, [pc, #164]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002cb6:	4b24      	ldr	r3, [pc, #144]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	0e1b      	lsrs	r3, r3, #24
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002cc4:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cca:	0c1b      	lsrs	r3, r3, #16
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	019a      	lsls	r2, r3, #6
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	041b      	lsls	r3, r3, #16
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	071b      	lsls	r3, r3, #28
 8002cea:	4917      	ldr	r1, [pc, #92]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002cf2:	4b15      	ldr	r3, [pc, #84]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002cf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	4911      	ldr	r1, [pc, #68]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d14:	f7fd fee8 	bl	8000ae8 <HAL_GetTick>
 8002d18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002d1c:	f7fd fee4 	bl	8000ae8 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	; 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e007      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d3a:	d1ef      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3720      	adds	r7, #32
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	40023800 	.word	0x40023800

08002d4c <memset>:
 8002d4c:	4402      	add	r2, r0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4d0d      	ldr	r5, [pc, #52]	; (8002d94 <__libc_init_array+0x38>)
 8002d60:	4c0d      	ldr	r4, [pc, #52]	; (8002d98 <__libc_init_array+0x3c>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	2600      	movs	r6, #0
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	4d0b      	ldr	r5, [pc, #44]	; (8002d9c <__libc_init_array+0x40>)
 8002d6e:	4c0c      	ldr	r4, [pc, #48]	; (8002da0 <__libc_init_array+0x44>)
 8002d70:	f000 f818 	bl	8002da4 <_init>
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	2600      	movs	r6, #0
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08002dd4 	.word	0x08002dd4
 8002d98:	08002dd4 	.word	0x08002dd4
 8002d9c:	08002dd4 	.word	0x08002dd4
 8002da0:	08002dd8 	.word	0x08002dd8

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
